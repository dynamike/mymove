// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateWebhookSubscription update webhook subscription
//
// swagger:model UpdateWebhookSubscription
type UpdateWebhookSubscription struct {

	// The URL to which the notifications for this subscription will be pushed to.
	CallbackURL string `json:"callbackUrl,omitempty"`

	// A string used to represent which events this subscriber expects to be notified about. Corresponds to the possible event_key values in webhook_notifications.
	EventKey string `json:"eventKey,omitempty"`

	// status
	Status WebhookSubscriptionStatus `json:"status,omitempty"`

	// subsciber Id
	// Format: uuid
	SubsciberID strfmt.UUID `json:"subsciberId,omitempty"`
}

// Validate validates this update webhook subscription
func (m *UpdateWebhookSubscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubsciberID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateWebhookSubscription) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *UpdateWebhookSubscription) validateSubsciberID(formats strfmt.Registry) error {

	if swag.IsZero(m.SubsciberID) { // not required
		return nil
	}

	if err := validate.FormatOf("subsciberId", "body", "uuid", m.SubsciberID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateWebhookSubscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateWebhookSubscription) UnmarshalBinary(b []byte) error {
	var res UpdateWebhookSubscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
