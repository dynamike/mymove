// Code generated by go-swagger; DO NOT EDIT.

package move_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListMoveTaskOrdersForMoveOrderHandlerFunc turns a function with the right signature into a list move task orders for move order handler
type ListMoveTaskOrdersForMoveOrderHandlerFunc func(ListMoveTaskOrdersForMoveOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListMoveTaskOrdersForMoveOrderHandlerFunc) Handle(params ListMoveTaskOrdersForMoveOrderParams) middleware.Responder {
	return fn(params)
}

// ListMoveTaskOrdersForMoveOrderHandler interface for that can handle valid list move task orders for move order params
type ListMoveTaskOrdersForMoveOrderHandler interface {
	Handle(ListMoveTaskOrdersForMoveOrderParams) middleware.Responder
}

// NewListMoveTaskOrdersForMoveOrder creates a new http.Handler for the list move task orders for move order operation
func NewListMoveTaskOrdersForMoveOrder(ctx *middleware.Context, handler ListMoveTaskOrdersForMoveOrderHandler) *ListMoveTaskOrdersForMoveOrder {
	return &ListMoveTaskOrdersForMoveOrder{Context: ctx, Handler: handler}
}

/*ListMoveTaskOrdersForMoveOrder swagger:route GET /move-orders/{moveOrderID}/move-task-orders moveOrder listMoveTaskOrdersForMoveOrder

Gets move task orders associated with a move order

Gets move task orders associated with a move order

*/
type ListMoveTaskOrdersForMoveOrder struct {
	Context *middleware.Context
	Handler ListMoveTaskOrdersForMoveOrderHandler
}

func (o *ListMoveTaskOrdersForMoveOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListMoveTaskOrdersForMoveOrderParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
