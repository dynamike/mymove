// Code generated by go-swagger; DO NOT EDIT.

package internalmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserUploadPayload user upload payload
//
// swagger:model UserUploadPayload
type UserUploadPayload struct {

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// document
	Document *DocumentPayload `json:"document,omitempty"`

	// document id
	// Format: uuid
	DocumentID strfmt.UUID `json:"document_id,omitempty"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// upload
	Upload *UploadPayload `json:"upload,omitempty"`

	// upload id
	// Format: uuid
	UploadID strfmt.UUID `json:"upload_id,omitempty"`

	// uploader id
	// Format: uuid
	UploaderID strfmt.UUID `json:"uploader_id,omitempty"`
}

// Validate validates this user upload payload
func (m *UserUploadPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploaderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserUploadPayload) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserUploadPayload) validateDocument(formats strfmt.Registry) error {

	if swag.IsZero(m.Document) { // not required
		return nil
	}

	if m.Document != nil {
		if err := m.Document.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("document")
			}
			return err
		}
	}

	return nil
}

func (m *UserUploadPayload) validateDocumentID(formats strfmt.Registry) error {

	if swag.IsZero(m.DocumentID) { // not required
		return nil
	}

	if err := validate.FormatOf("document_id", "body", "uuid", m.DocumentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserUploadPayload) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserUploadPayload) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserUploadPayload) validateUpload(formats strfmt.Registry) error {

	if swag.IsZero(m.Upload) { // not required
		return nil
	}

	if m.Upload != nil {
		if err := m.Upload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upload")
			}
			return err
		}
	}

	return nil
}

func (m *UserUploadPayload) validateUploadID(formats strfmt.Registry) error {

	if swag.IsZero(m.UploadID) { // not required
		return nil
	}

	if err := validate.FormatOf("upload_id", "body", "uuid", m.UploadID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserUploadPayload) validateUploaderID(formats strfmt.Registry) error {

	if swag.IsZero(m.UploaderID) { // not required
		return nil
	}

	if err := validate.FormatOf("uploader_id", "body", "uuid", m.UploaderID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserUploadPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserUploadPayload) UnmarshalBinary(b []byte) error {
	var res UserUploadPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
