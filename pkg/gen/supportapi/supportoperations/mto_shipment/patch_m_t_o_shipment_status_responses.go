// Code generated by go-swagger; DO NOT EDIT.

package mto_shipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	supportmessages "github.com/transcom/mymove/pkg/gen/supportmessages"
)

// PatchMTOShipmentStatusOKCode is the HTTP code returned for type PatchMTOShipmentStatusOK
const PatchMTOShipmentStatusOKCode int = 200

/*PatchMTOShipmentStatusOK Successfully updated the shipment's status.

swagger:response patchMTOShipmentStatusOK
*/
type PatchMTOShipmentStatusOK struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.MTOShipment `json:"body,omitempty"`
}

// NewPatchMTOShipmentStatusOK creates PatchMTOShipmentStatusOK with default headers values
func NewPatchMTOShipmentStatusOK() *PatchMTOShipmentStatusOK {

	return &PatchMTOShipmentStatusOK{}
}

// WithPayload adds the payload to the patch m t o shipment status o k response
func (o *PatchMTOShipmentStatusOK) WithPayload(payload *supportmessages.MTOShipment) *PatchMTOShipmentStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch m t o shipment status o k response
func (o *PatchMTOShipmentStatusOK) SetPayload(payload *supportmessages.MTOShipment) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMTOShipmentStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchMTOShipmentStatusBadRequestCode is the HTTP code returned for type PatchMTOShipmentStatusBadRequest
const PatchMTOShipmentStatusBadRequestCode int = 400

/*PatchMTOShipmentStatusBadRequest The parameters were invalid.

swagger:response patchMTOShipmentStatusBadRequest
*/
type PatchMTOShipmentStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.Error `json:"body,omitempty"`
}

// NewPatchMTOShipmentStatusBadRequest creates PatchMTOShipmentStatusBadRequest with default headers values
func NewPatchMTOShipmentStatusBadRequest() *PatchMTOShipmentStatusBadRequest {

	return &PatchMTOShipmentStatusBadRequest{}
}

// WithPayload adds the payload to the patch m t o shipment status bad request response
func (o *PatchMTOShipmentStatusBadRequest) WithPayload(payload *supportmessages.Error) *PatchMTOShipmentStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch m t o shipment status bad request response
func (o *PatchMTOShipmentStatusBadRequest) SetPayload(payload *supportmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMTOShipmentStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchMTOShipmentStatusUnauthorizedCode is the HTTP code returned for type PatchMTOShipmentStatusUnauthorized
const PatchMTOShipmentStatusUnauthorizedCode int = 401

/*PatchMTOShipmentStatusUnauthorized The request was unauthorized.

swagger:response patchMTOShipmentStatusUnauthorized
*/
type PatchMTOShipmentStatusUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchMTOShipmentStatusUnauthorized creates PatchMTOShipmentStatusUnauthorized with default headers values
func NewPatchMTOShipmentStatusUnauthorized() *PatchMTOShipmentStatusUnauthorized {

	return &PatchMTOShipmentStatusUnauthorized{}
}

// WithPayload adds the payload to the patch m t o shipment status unauthorized response
func (o *PatchMTOShipmentStatusUnauthorized) WithPayload(payload interface{}) *PatchMTOShipmentStatusUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch m t o shipment status unauthorized response
func (o *PatchMTOShipmentStatusUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMTOShipmentStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PatchMTOShipmentStatusForbiddenCode is the HTTP code returned for type PatchMTOShipmentStatusForbidden
const PatchMTOShipmentStatusForbiddenCode int = 403

/*PatchMTOShipmentStatusForbidden The client doesn't have permissions to perform the request.

swagger:response patchMTOShipmentStatusForbidden
*/
type PatchMTOShipmentStatusForbidden struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchMTOShipmentStatusForbidden creates PatchMTOShipmentStatusForbidden with default headers values
func NewPatchMTOShipmentStatusForbidden() *PatchMTOShipmentStatusForbidden {

	return &PatchMTOShipmentStatusForbidden{}
}

// WithPayload adds the payload to the patch m t o shipment status forbidden response
func (o *PatchMTOShipmentStatusForbidden) WithPayload(payload interface{}) *PatchMTOShipmentStatusForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch m t o shipment status forbidden response
func (o *PatchMTOShipmentStatusForbidden) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMTOShipmentStatusForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PatchMTOShipmentStatusNotFoundCode is the HTTP code returned for type PatchMTOShipmentStatusNotFound
const PatchMTOShipmentStatusNotFoundCode int = 404

/*PatchMTOShipmentStatusNotFound The requested resource wasn't found.

swagger:response patchMTOShipmentStatusNotFound
*/
type PatchMTOShipmentStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.Error `json:"body,omitempty"`
}

// NewPatchMTOShipmentStatusNotFound creates PatchMTOShipmentStatusNotFound with default headers values
func NewPatchMTOShipmentStatusNotFound() *PatchMTOShipmentStatusNotFound {

	return &PatchMTOShipmentStatusNotFound{}
}

// WithPayload adds the payload to the patch m t o shipment status not found response
func (o *PatchMTOShipmentStatusNotFound) WithPayload(payload *supportmessages.Error) *PatchMTOShipmentStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch m t o shipment status not found response
func (o *PatchMTOShipmentStatusNotFound) SetPayload(payload *supportmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMTOShipmentStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchMTOShipmentStatusConflictCode is the HTTP code returned for type PatchMTOShipmentStatusConflict
const PatchMTOShipmentStatusConflictCode int = 409

/*PatchMTOShipmentStatusConflict Conflict error due to trying to change the status of shipment that is not currently "SUBMITTED".

swagger:response patchMTOShipmentStatusConflict
*/
type PatchMTOShipmentStatusConflict struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchMTOShipmentStatusConflict creates PatchMTOShipmentStatusConflict with default headers values
func NewPatchMTOShipmentStatusConflict() *PatchMTOShipmentStatusConflict {

	return &PatchMTOShipmentStatusConflict{}
}

// WithPayload adds the payload to the patch m t o shipment status conflict response
func (o *PatchMTOShipmentStatusConflict) WithPayload(payload interface{}) *PatchMTOShipmentStatusConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch m t o shipment status conflict response
func (o *PatchMTOShipmentStatusConflict) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMTOShipmentStatusConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PatchMTOShipmentStatusPreconditionFailedCode is the HTTP code returned for type PatchMTOShipmentStatusPreconditionFailed
const PatchMTOShipmentStatusPreconditionFailedCode int = 412

/*PatchMTOShipmentStatusPreconditionFailed Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.

swagger:response patchMTOShipmentStatusPreconditionFailed
*/
type PatchMTOShipmentStatusPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.Error `json:"body,omitempty"`
}

// NewPatchMTOShipmentStatusPreconditionFailed creates PatchMTOShipmentStatusPreconditionFailed with default headers values
func NewPatchMTOShipmentStatusPreconditionFailed() *PatchMTOShipmentStatusPreconditionFailed {

	return &PatchMTOShipmentStatusPreconditionFailed{}
}

// WithPayload adds the payload to the patch m t o shipment status precondition failed response
func (o *PatchMTOShipmentStatusPreconditionFailed) WithPayload(payload *supportmessages.Error) *PatchMTOShipmentStatusPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch m t o shipment status precondition failed response
func (o *PatchMTOShipmentStatusPreconditionFailed) SetPayload(payload *supportmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMTOShipmentStatusPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchMTOShipmentStatusUnprocessableEntityCode is the HTTP code returned for type PatchMTOShipmentStatusUnprocessableEntity
const PatchMTOShipmentStatusUnprocessableEntityCode int = 422

/*PatchMTOShipmentStatusUnprocessableEntity The payload was unprocessable.

swagger:response patchMTOShipmentStatusUnprocessableEntity
*/
type PatchMTOShipmentStatusUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.ValidationError `json:"body,omitempty"`
}

// NewPatchMTOShipmentStatusUnprocessableEntity creates PatchMTOShipmentStatusUnprocessableEntity with default headers values
func NewPatchMTOShipmentStatusUnprocessableEntity() *PatchMTOShipmentStatusUnprocessableEntity {

	return &PatchMTOShipmentStatusUnprocessableEntity{}
}

// WithPayload adds the payload to the patch m t o shipment status unprocessable entity response
func (o *PatchMTOShipmentStatusUnprocessableEntity) WithPayload(payload *supportmessages.ValidationError) *PatchMTOShipmentStatusUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch m t o shipment status unprocessable entity response
func (o *PatchMTOShipmentStatusUnprocessableEntity) SetPayload(payload *supportmessages.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMTOShipmentStatusUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchMTOShipmentStatusInternalServerErrorCode is the HTTP code returned for type PatchMTOShipmentStatusInternalServerError
const PatchMTOShipmentStatusInternalServerErrorCode int = 500

/*PatchMTOShipmentStatusInternalServerError A server error occurred.

swagger:response patchMTOShipmentStatusInternalServerError
*/
type PatchMTOShipmentStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *supportmessages.Error `json:"body,omitempty"`
}

// NewPatchMTOShipmentStatusInternalServerError creates PatchMTOShipmentStatusInternalServerError with default headers values
func NewPatchMTOShipmentStatusInternalServerError() *PatchMTOShipmentStatusInternalServerError {

	return &PatchMTOShipmentStatusInternalServerError{}
}

// WithPayload adds the payload to the patch m t o shipment status internal server error response
func (o *PatchMTOShipmentStatusInternalServerError) WithPayload(payload *supportmessages.Error) *PatchMTOShipmentStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch m t o shipment status internal server error response
func (o *PatchMTOShipmentStatusInternalServerError) SetPayload(payload *supportmessages.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMTOShipmentStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
