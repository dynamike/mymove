// Code generated by go-swagger; DO NOT EDIT.

package move_task_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	supportmessages "github.com/transcom/mymove/pkg/gen/supportmessages"
)

// UpdateMoveTaskOrderStatusReader is a Reader for the UpdateMoveTaskOrderStatus structure.
type UpdateMoveTaskOrderStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMoveTaskOrderStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMoveTaskOrderStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMoveTaskOrderStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateMoveTaskOrderStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateMoveTaskOrderStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateMoveTaskOrderStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateMoveTaskOrderStatusPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateMoveTaskOrderStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateMoveTaskOrderStatusOK creates a UpdateMoveTaskOrderStatusOK with default headers values
func NewUpdateMoveTaskOrderStatusOK() *UpdateMoveTaskOrderStatusOK {
	return &UpdateMoveTaskOrderStatusOK{}
}

/*UpdateMoveTaskOrderStatusOK handles this case with default header values.

Successfully updated move task order status.
*/
type UpdateMoveTaskOrderStatusOK struct {
	Payload *supportmessages.MoveTaskOrder
}

func (o *UpdateMoveTaskOrderStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/status][%d] updateMoveTaskOrderStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateMoveTaskOrderStatusOK) GetPayload() *supportmessages.MoveTaskOrder {
	return o.Payload
}

func (o *UpdateMoveTaskOrderStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.MoveTaskOrder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMoveTaskOrderStatusBadRequest creates a UpdateMoveTaskOrderStatusBadRequest with default headers values
func NewUpdateMoveTaskOrderStatusBadRequest() *UpdateMoveTaskOrderStatusBadRequest {
	return &UpdateMoveTaskOrderStatusBadRequest{}
}

/*UpdateMoveTaskOrderStatusBadRequest handles this case with default header values.

The parameters were invalid.
*/
type UpdateMoveTaskOrderStatusBadRequest struct {
	Payload *supportmessages.Error
}

func (o *UpdateMoveTaskOrderStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/status][%d] updateMoveTaskOrderStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMoveTaskOrderStatusBadRequest) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *UpdateMoveTaskOrderStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMoveTaskOrderStatusUnauthorized creates a UpdateMoveTaskOrderStatusUnauthorized with default headers values
func NewUpdateMoveTaskOrderStatusUnauthorized() *UpdateMoveTaskOrderStatusUnauthorized {
	return &UpdateMoveTaskOrderStatusUnauthorized{}
}

/*UpdateMoveTaskOrderStatusUnauthorized handles this case with default header values.

The request was unauthorized.
*/
type UpdateMoveTaskOrderStatusUnauthorized struct {
	Payload interface{}
}

func (o *UpdateMoveTaskOrderStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/status][%d] updateMoveTaskOrderStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateMoveTaskOrderStatusUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateMoveTaskOrderStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMoveTaskOrderStatusForbidden creates a UpdateMoveTaskOrderStatusForbidden with default headers values
func NewUpdateMoveTaskOrderStatusForbidden() *UpdateMoveTaskOrderStatusForbidden {
	return &UpdateMoveTaskOrderStatusForbidden{}
}

/*UpdateMoveTaskOrderStatusForbidden handles this case with default header values.

The client doesn't have permissions to perform the request.
*/
type UpdateMoveTaskOrderStatusForbidden struct {
	Payload interface{}
}

func (o *UpdateMoveTaskOrderStatusForbidden) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/status][%d] updateMoveTaskOrderStatusForbidden  %+v", 403, o.Payload)
}

func (o *UpdateMoveTaskOrderStatusForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateMoveTaskOrderStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMoveTaskOrderStatusNotFound creates a UpdateMoveTaskOrderStatusNotFound with default headers values
func NewUpdateMoveTaskOrderStatusNotFound() *UpdateMoveTaskOrderStatusNotFound {
	return &UpdateMoveTaskOrderStatusNotFound{}
}

/*UpdateMoveTaskOrderStatusNotFound handles this case with default header values.

The requested resource wasn't found.
*/
type UpdateMoveTaskOrderStatusNotFound struct {
	Payload *supportmessages.Error
}

func (o *UpdateMoveTaskOrderStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/status][%d] updateMoveTaskOrderStatusNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMoveTaskOrderStatusNotFound) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *UpdateMoveTaskOrderStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMoveTaskOrderStatusPreconditionFailed creates a UpdateMoveTaskOrderStatusPreconditionFailed with default headers values
func NewUpdateMoveTaskOrderStatusPreconditionFailed() *UpdateMoveTaskOrderStatusPreconditionFailed {
	return &UpdateMoveTaskOrderStatusPreconditionFailed{}
}

/*UpdateMoveTaskOrderStatusPreconditionFailed handles this case with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type UpdateMoveTaskOrderStatusPreconditionFailed struct {
	Payload *supportmessages.Error
}

func (o *UpdateMoveTaskOrderStatusPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/status][%d] updateMoveTaskOrderStatusPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateMoveTaskOrderStatusPreconditionFailed) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *UpdateMoveTaskOrderStatusPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMoveTaskOrderStatusInternalServerError creates a UpdateMoveTaskOrderStatusInternalServerError with default headers values
func NewUpdateMoveTaskOrderStatusInternalServerError() *UpdateMoveTaskOrderStatusInternalServerError {
	return &UpdateMoveTaskOrderStatusInternalServerError{}
}

/*UpdateMoveTaskOrderStatusInternalServerError handles this case with default header values.

A server error occurred.
*/
type UpdateMoveTaskOrderStatusInternalServerError struct {
	Payload *supportmessages.Error
}

func (o *UpdateMoveTaskOrderStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /move-task-orders/{moveTaskOrderID}/status][%d] updateMoveTaskOrderStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMoveTaskOrderStatusInternalServerError) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *UpdateMoveTaskOrderStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
