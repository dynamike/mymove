// Code generated by go-swagger; DO NOT EDIT.

package payment_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payment request API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payment request API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPaymentRequestEDI(params *GetPaymentRequestEDIParams) (*GetPaymentRequestEDIOK, error)

	ListMTOPaymentRequests(params *ListMTOPaymentRequestsParams) (*ListMTOPaymentRequestsOK, error)

	ProcessReviewedPaymentRequests(params *ProcessReviewedPaymentRequestsParams) (*ProcessReviewedPaymentRequestsOK, error)

	UpdateProcessedPaymentRequestStatus(params *UpdateProcessedPaymentRequestStatusParams) (*UpdateProcessedPaymentRequestStatusOK, error)

	UpdateReviewedPaymentRequestStatus(params *UpdateReviewedPaymentRequestStatusParams) (*UpdateReviewedPaymentRequestStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPaymentRequestEDI gets payment request e d i

  Returns the EDI (Electronic Data Interchange) message for the payment request identified
by the given payment request ID. Note that the EDI returned in the JSON payload will have \n where there
would normally be line breaks (due to JSON not allowing line breaks in a string).

This is a support endpoint and will not be available in production.

*/
func (a *Client) GetPaymentRequestEDI(params *GetPaymentRequestEDIParams) (*GetPaymentRequestEDIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentRequestEDIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPaymentRequestEDI",
		Method:             "GET",
		PathPattern:        "/payment-requests/{paymentRequestID}/edi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPaymentRequestEDIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentRequestEDIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPaymentRequestEDI: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListMTOPaymentRequests lists m t o payment requests

  ### Functionality

This endpoint lists all PaymentRequests associated with a given MoveTaskOrder.

This is a support endpoint and is not available in production.

*/
func (a *Client) ListMTOPaymentRequests(params *ListMTOPaymentRequestsParams) (*ListMTOPaymentRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMTOPaymentRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listMTOPaymentRequests",
		Method:             "GET",
		PathPattern:        "/move-task-orders/{moveTaskOrderID}/payment-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListMTOPaymentRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMTOPaymentRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listMTOPaymentRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProcessReviewedPaymentRequests processes reviewed payment requests

  Updates the status of reviewed payment requests and sends PRs to Syncada if
the SendToSyncada flag is set

This is a support endpoint and will not be available in production.

*/
func (a *Client) ProcessReviewedPaymentRequests(params *ProcessReviewedPaymentRequestsParams) (*ProcessReviewedPaymentRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProcessReviewedPaymentRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "processReviewedPaymentRequests",
		Method:             "PATCH",
		PathPattern:        "/payment-requests/process-reviewed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProcessReviewedPaymentRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProcessReviewedPaymentRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for processReviewedPaymentRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProcessedPaymentRequestStatus updates processed payment request status

  Updates status of a payment request to SENT_TO_GEX, RECEIVED_BY_GEX, EDI_ERROR or PAID

This is a support endpoint and is not available in production.

*/
func (a *Client) UpdateProcessedPaymentRequestStatus(params *UpdateProcessedPaymentRequestStatusParams) (*UpdateProcessedPaymentRequestStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProcessedPaymentRequestStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProcessedPaymentRequestStatus",
		Method:             "PATCH",
		PathPattern:        "/payment-requests/{paymentRequestID}/status/processed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProcessedPaymentRequestStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProcessedPaymentRequestStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProcessedPaymentRequestStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateReviewedPaymentRequestStatus updates reviewed payment request status

  Updates status of a payment request to REVIEWED, or REVIEWED_AND_ALL_SERVICE_ITEMS_REJECTED

A status of REVIEWED can optionally have a `rejectionReason`.

This is a support endpoint and is not available in production.

*/
func (a *Client) UpdateReviewedPaymentRequestStatus(params *UpdateReviewedPaymentRequestStatusParams) (*UpdateReviewedPaymentRequestStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReviewedPaymentRequestStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateReviewedPaymentRequestStatus",
		Method:             "PATCH",
		PathPattern:        "/payment-requests/{paymentRequestID}/status/reviewed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateReviewedPaymentRequestStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReviewedPaymentRequestStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateReviewedPaymentRequestStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
