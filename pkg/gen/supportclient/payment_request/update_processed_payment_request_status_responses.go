// Code generated by go-swagger; DO NOT EDIT.

package payment_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/supportmessages"
)

// UpdateProcessedPaymentRequestStatusReader is a Reader for the UpdateProcessedPaymentRequestStatus structure.
type UpdateProcessedPaymentRequestStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProcessedPaymentRequestStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProcessedPaymentRequestStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateProcessedPaymentRequestStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateProcessedPaymentRequestStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateProcessedPaymentRequestStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateProcessedPaymentRequestStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateProcessedPaymentRequestStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateProcessedPaymentRequestStatusPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateProcessedPaymentRequestStatusUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateProcessedPaymentRequestStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateProcessedPaymentRequestStatusOK creates a UpdateProcessedPaymentRequestStatusOK with default headers values
func NewUpdateProcessedPaymentRequestStatusOK() *UpdateProcessedPaymentRequestStatusOK {
	return &UpdateProcessedPaymentRequestStatusOK{}
}

/*UpdateProcessedPaymentRequestStatusOK handles this case with default header values.

Successfully updated payment request status.
*/
type UpdateProcessedPaymentRequestStatusOK struct {
	Payload *supportmessages.PaymentRequest
}

func (o *UpdateProcessedPaymentRequestStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/processed][%d] updateProcessedPaymentRequestStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateProcessedPaymentRequestStatusOK) GetPayload() *supportmessages.PaymentRequest {
	return o.Payload
}

func (o *UpdateProcessedPaymentRequestStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.PaymentRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProcessedPaymentRequestStatusBadRequest creates a UpdateProcessedPaymentRequestStatusBadRequest with default headers values
func NewUpdateProcessedPaymentRequestStatusBadRequest() *UpdateProcessedPaymentRequestStatusBadRequest {
	return &UpdateProcessedPaymentRequestStatusBadRequest{}
}

/*UpdateProcessedPaymentRequestStatusBadRequest handles this case with default header values.

The request payload is invalid.
*/
type UpdateProcessedPaymentRequestStatusBadRequest struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateProcessedPaymentRequestStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/processed][%d] updateProcessedPaymentRequestStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProcessedPaymentRequestStatusBadRequest) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateProcessedPaymentRequestStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProcessedPaymentRequestStatusUnauthorized creates a UpdateProcessedPaymentRequestStatusUnauthorized with default headers values
func NewUpdateProcessedPaymentRequestStatusUnauthorized() *UpdateProcessedPaymentRequestStatusUnauthorized {
	return &UpdateProcessedPaymentRequestStatusUnauthorized{}
}

/*UpdateProcessedPaymentRequestStatusUnauthorized handles this case with default header values.

The request was denied.
*/
type UpdateProcessedPaymentRequestStatusUnauthorized struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateProcessedPaymentRequestStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/processed][%d] updateProcessedPaymentRequestStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateProcessedPaymentRequestStatusUnauthorized) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateProcessedPaymentRequestStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProcessedPaymentRequestStatusForbidden creates a UpdateProcessedPaymentRequestStatusForbidden with default headers values
func NewUpdateProcessedPaymentRequestStatusForbidden() *UpdateProcessedPaymentRequestStatusForbidden {
	return &UpdateProcessedPaymentRequestStatusForbidden{}
}

/*UpdateProcessedPaymentRequestStatusForbidden handles this case with default header values.

The request was denied.
*/
type UpdateProcessedPaymentRequestStatusForbidden struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateProcessedPaymentRequestStatusForbidden) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/processed][%d] updateProcessedPaymentRequestStatusForbidden  %+v", 403, o.Payload)
}

func (o *UpdateProcessedPaymentRequestStatusForbidden) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateProcessedPaymentRequestStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProcessedPaymentRequestStatusNotFound creates a UpdateProcessedPaymentRequestStatusNotFound with default headers values
func NewUpdateProcessedPaymentRequestStatusNotFound() *UpdateProcessedPaymentRequestStatusNotFound {
	return &UpdateProcessedPaymentRequestStatusNotFound{}
}

/*UpdateProcessedPaymentRequestStatusNotFound handles this case with default header values.

The requested resource wasn't found.
*/
type UpdateProcessedPaymentRequestStatusNotFound struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateProcessedPaymentRequestStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/processed][%d] updateProcessedPaymentRequestStatusNotFound  %+v", 404, o.Payload)
}

func (o *UpdateProcessedPaymentRequestStatusNotFound) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateProcessedPaymentRequestStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProcessedPaymentRequestStatusConflict creates a UpdateProcessedPaymentRequestStatusConflict with default headers values
func NewUpdateProcessedPaymentRequestStatusConflict() *UpdateProcessedPaymentRequestStatusConflict {
	return &UpdateProcessedPaymentRequestStatusConflict{}
}

/*UpdateProcessedPaymentRequestStatusConflict handles this case with default header values.

There was a conflict with the request.
*/
type UpdateProcessedPaymentRequestStatusConflict struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateProcessedPaymentRequestStatusConflict) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/processed][%d] updateProcessedPaymentRequestStatusConflict  %+v", 409, o.Payload)
}

func (o *UpdateProcessedPaymentRequestStatusConflict) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateProcessedPaymentRequestStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProcessedPaymentRequestStatusPreconditionFailed creates a UpdateProcessedPaymentRequestStatusPreconditionFailed with default headers values
func NewUpdateProcessedPaymentRequestStatusPreconditionFailed() *UpdateProcessedPaymentRequestStatusPreconditionFailed {
	return &UpdateProcessedPaymentRequestStatusPreconditionFailed{}
}

/*UpdateProcessedPaymentRequestStatusPreconditionFailed handles this case with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type UpdateProcessedPaymentRequestStatusPreconditionFailed struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateProcessedPaymentRequestStatusPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/processed][%d] updateProcessedPaymentRequestStatusPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateProcessedPaymentRequestStatusPreconditionFailed) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateProcessedPaymentRequestStatusPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProcessedPaymentRequestStatusUnprocessableEntity creates a UpdateProcessedPaymentRequestStatusUnprocessableEntity with default headers values
func NewUpdateProcessedPaymentRequestStatusUnprocessableEntity() *UpdateProcessedPaymentRequestStatusUnprocessableEntity {
	return &UpdateProcessedPaymentRequestStatusUnprocessableEntity{}
}

/*UpdateProcessedPaymentRequestStatusUnprocessableEntity handles this case with default header values.

The payload was unprocessable.
*/
type UpdateProcessedPaymentRequestStatusUnprocessableEntity struct {
	Payload *supportmessages.ValidationError
}

func (o *UpdateProcessedPaymentRequestStatusUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/processed][%d] updateProcessedPaymentRequestStatusUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateProcessedPaymentRequestStatusUnprocessableEntity) GetPayload() *supportmessages.ValidationError {
	return o.Payload
}

func (o *UpdateProcessedPaymentRequestStatusUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProcessedPaymentRequestStatusInternalServerError creates a UpdateProcessedPaymentRequestStatusInternalServerError with default headers values
func NewUpdateProcessedPaymentRequestStatusInternalServerError() *UpdateProcessedPaymentRequestStatusInternalServerError {
	return &UpdateProcessedPaymentRequestStatusInternalServerError{}
}

/*UpdateProcessedPaymentRequestStatusInternalServerError handles this case with default header values.

A server error occurred.
*/
type UpdateProcessedPaymentRequestStatusInternalServerError struct {
	Payload *supportmessages.Error
}

func (o *UpdateProcessedPaymentRequestStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/processed][%d] updateProcessedPaymentRequestStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateProcessedPaymentRequestStatusInternalServerError) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *UpdateProcessedPaymentRequestStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
