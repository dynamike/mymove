// Code generated by go-swagger; DO NOT EDIT.

package payment_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/supportmessages"
)

// NewUpdateReviewedPaymentRequestStatusParams creates a new UpdateReviewedPaymentRequestStatusParams object
// with the default values initialized.
func NewUpdateReviewedPaymentRequestStatusParams() *UpdateReviewedPaymentRequestStatusParams {
	var ()
	return &UpdateReviewedPaymentRequestStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateReviewedPaymentRequestStatusParamsWithTimeout creates a new UpdateReviewedPaymentRequestStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateReviewedPaymentRequestStatusParamsWithTimeout(timeout time.Duration) *UpdateReviewedPaymentRequestStatusParams {
	var ()
	return &UpdateReviewedPaymentRequestStatusParams{

		timeout: timeout,
	}
}

// NewUpdateReviewedPaymentRequestStatusParamsWithContext creates a new UpdateReviewedPaymentRequestStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateReviewedPaymentRequestStatusParamsWithContext(ctx context.Context) *UpdateReviewedPaymentRequestStatusParams {
	var ()
	return &UpdateReviewedPaymentRequestStatusParams{

		Context: ctx,
	}
}

// NewUpdateReviewedPaymentRequestStatusParamsWithHTTPClient creates a new UpdateReviewedPaymentRequestStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateReviewedPaymentRequestStatusParamsWithHTTPClient(client *http.Client) *UpdateReviewedPaymentRequestStatusParams {
	var ()
	return &UpdateReviewedPaymentRequestStatusParams{
		HTTPClient: client,
	}
}

/*UpdateReviewedPaymentRequestStatusParams contains all the parameters to send to the API endpoint
for the update reviewed payment request status operation typically these are written to a http.Request
*/
type UpdateReviewedPaymentRequestStatusParams struct {

	/*IfMatch
	  Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error.


	*/
	IfMatch string
	/*Body*/
	Body *supportmessages.UpdateReviewedPaymentRequestStatus
	/*PaymentRequestID
	  UUID of payment request.

	*/
	PaymentRequestID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) WithTimeout(timeout time.Duration) *UpdateReviewedPaymentRequestStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) WithContext(ctx context.Context) *UpdateReviewedPaymentRequestStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) WithHTTPClient(client *http.Client) *UpdateReviewedPaymentRequestStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) WithIfMatch(ifMatch string) *UpdateReviewedPaymentRequestStatusParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) SetIfMatch(ifMatch string) {
	o.IfMatch = ifMatch
}

// WithBody adds the body to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) WithBody(body *supportmessages.UpdateReviewedPaymentRequestStatus) *UpdateReviewedPaymentRequestStatusParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) SetBody(body *supportmessages.UpdateReviewedPaymentRequestStatus) {
	o.Body = body
}

// WithPaymentRequestID adds the paymentRequestID to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) WithPaymentRequestID(paymentRequestID strfmt.UUID) *UpdateReviewedPaymentRequestStatusParams {
	o.SetPaymentRequestID(paymentRequestID)
	return o
}

// SetPaymentRequestID adds the paymentRequestId to the update reviewed payment request status params
func (o *UpdateReviewedPaymentRequestStatusParams) SetPaymentRequestID(paymentRequestID strfmt.UUID) {
	o.PaymentRequestID = paymentRequestID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateReviewedPaymentRequestStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param If-Match
	if err := r.SetHeaderParam("If-Match", o.IfMatch); err != nil {
		return err
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param paymentRequestID
	if err := r.SetPathParam("paymentRequestID", o.PaymentRequestID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
