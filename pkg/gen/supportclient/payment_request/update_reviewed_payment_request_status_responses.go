// Code generated by go-swagger; DO NOT EDIT.

package payment_request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/supportmessages"
)

// UpdateReviewedPaymentRequestStatusReader is a Reader for the UpdateReviewedPaymentRequestStatus structure.
type UpdateReviewedPaymentRequestStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateReviewedPaymentRequestStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateReviewedPaymentRequestStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateReviewedPaymentRequestStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateReviewedPaymentRequestStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateReviewedPaymentRequestStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateReviewedPaymentRequestStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateReviewedPaymentRequestStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateReviewedPaymentRequestStatusPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateReviewedPaymentRequestStatusUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateReviewedPaymentRequestStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateReviewedPaymentRequestStatusOK creates a UpdateReviewedPaymentRequestStatusOK with default headers values
func NewUpdateReviewedPaymentRequestStatusOK() *UpdateReviewedPaymentRequestStatusOK {
	return &UpdateReviewedPaymentRequestStatusOK{}
}

/*UpdateReviewedPaymentRequestStatusOK handles this case with default header values.

Successfully updated payment request status.
*/
type UpdateReviewedPaymentRequestStatusOK struct {
	Payload *supportmessages.PaymentRequest
}

func (o *UpdateReviewedPaymentRequestStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/reviewed][%d] updateReviewedPaymentRequestStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateReviewedPaymentRequestStatusOK) GetPayload() *supportmessages.PaymentRequest {
	return o.Payload
}

func (o *UpdateReviewedPaymentRequestStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.PaymentRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReviewedPaymentRequestStatusBadRequest creates a UpdateReviewedPaymentRequestStatusBadRequest with default headers values
func NewUpdateReviewedPaymentRequestStatusBadRequest() *UpdateReviewedPaymentRequestStatusBadRequest {
	return &UpdateReviewedPaymentRequestStatusBadRequest{}
}

/*UpdateReviewedPaymentRequestStatusBadRequest handles this case with default header values.

The request payload is invalid.
*/
type UpdateReviewedPaymentRequestStatusBadRequest struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateReviewedPaymentRequestStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/reviewed][%d] updateReviewedPaymentRequestStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateReviewedPaymentRequestStatusBadRequest) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateReviewedPaymentRequestStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReviewedPaymentRequestStatusUnauthorized creates a UpdateReviewedPaymentRequestStatusUnauthorized with default headers values
func NewUpdateReviewedPaymentRequestStatusUnauthorized() *UpdateReviewedPaymentRequestStatusUnauthorized {
	return &UpdateReviewedPaymentRequestStatusUnauthorized{}
}

/*UpdateReviewedPaymentRequestStatusUnauthorized handles this case with default header values.

The request was denied.
*/
type UpdateReviewedPaymentRequestStatusUnauthorized struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateReviewedPaymentRequestStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/reviewed][%d] updateReviewedPaymentRequestStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateReviewedPaymentRequestStatusUnauthorized) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateReviewedPaymentRequestStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReviewedPaymentRequestStatusForbidden creates a UpdateReviewedPaymentRequestStatusForbidden with default headers values
func NewUpdateReviewedPaymentRequestStatusForbidden() *UpdateReviewedPaymentRequestStatusForbidden {
	return &UpdateReviewedPaymentRequestStatusForbidden{}
}

/*UpdateReviewedPaymentRequestStatusForbidden handles this case with default header values.

The request was denied.
*/
type UpdateReviewedPaymentRequestStatusForbidden struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateReviewedPaymentRequestStatusForbidden) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/reviewed][%d] updateReviewedPaymentRequestStatusForbidden  %+v", 403, o.Payload)
}

func (o *UpdateReviewedPaymentRequestStatusForbidden) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateReviewedPaymentRequestStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReviewedPaymentRequestStatusNotFound creates a UpdateReviewedPaymentRequestStatusNotFound with default headers values
func NewUpdateReviewedPaymentRequestStatusNotFound() *UpdateReviewedPaymentRequestStatusNotFound {
	return &UpdateReviewedPaymentRequestStatusNotFound{}
}

/*UpdateReviewedPaymentRequestStatusNotFound handles this case with default header values.

The requested resource wasn't found.
*/
type UpdateReviewedPaymentRequestStatusNotFound struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateReviewedPaymentRequestStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/reviewed][%d] updateReviewedPaymentRequestStatusNotFound  %+v", 404, o.Payload)
}

func (o *UpdateReviewedPaymentRequestStatusNotFound) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateReviewedPaymentRequestStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReviewedPaymentRequestStatusConflict creates a UpdateReviewedPaymentRequestStatusConflict with default headers values
func NewUpdateReviewedPaymentRequestStatusConflict() *UpdateReviewedPaymentRequestStatusConflict {
	return &UpdateReviewedPaymentRequestStatusConflict{}
}

/*UpdateReviewedPaymentRequestStatusConflict handles this case with default header values.

There was a conflict with the request.
*/
type UpdateReviewedPaymentRequestStatusConflict struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateReviewedPaymentRequestStatusConflict) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/reviewed][%d] updateReviewedPaymentRequestStatusConflict  %+v", 409, o.Payload)
}

func (o *UpdateReviewedPaymentRequestStatusConflict) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateReviewedPaymentRequestStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReviewedPaymentRequestStatusPreconditionFailed creates a UpdateReviewedPaymentRequestStatusPreconditionFailed with default headers values
func NewUpdateReviewedPaymentRequestStatusPreconditionFailed() *UpdateReviewedPaymentRequestStatusPreconditionFailed {
	return &UpdateReviewedPaymentRequestStatusPreconditionFailed{}
}

/*UpdateReviewedPaymentRequestStatusPreconditionFailed handles this case with default header values.

Precondition failed, likely due to a stale eTag (If-Match). Fetch the request again to get the updated eTag value.
*/
type UpdateReviewedPaymentRequestStatusPreconditionFailed struct {
	Payload *supportmessages.ClientError
}

func (o *UpdateReviewedPaymentRequestStatusPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/reviewed][%d] updateReviewedPaymentRequestStatusPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateReviewedPaymentRequestStatusPreconditionFailed) GetPayload() *supportmessages.ClientError {
	return o.Payload
}

func (o *UpdateReviewedPaymentRequestStatusPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReviewedPaymentRequestStatusUnprocessableEntity creates a UpdateReviewedPaymentRequestStatusUnprocessableEntity with default headers values
func NewUpdateReviewedPaymentRequestStatusUnprocessableEntity() *UpdateReviewedPaymentRequestStatusUnprocessableEntity {
	return &UpdateReviewedPaymentRequestStatusUnprocessableEntity{}
}

/*UpdateReviewedPaymentRequestStatusUnprocessableEntity handles this case with default header values.

The payload was unprocessable.
*/
type UpdateReviewedPaymentRequestStatusUnprocessableEntity struct {
	Payload *supportmessages.ValidationError
}

func (o *UpdateReviewedPaymentRequestStatusUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/reviewed][%d] updateReviewedPaymentRequestStatusUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateReviewedPaymentRequestStatusUnprocessableEntity) GetPayload() *supportmessages.ValidationError {
	return o.Payload
}

func (o *UpdateReviewedPaymentRequestStatusUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReviewedPaymentRequestStatusInternalServerError creates a UpdateReviewedPaymentRequestStatusInternalServerError with default headers values
func NewUpdateReviewedPaymentRequestStatusInternalServerError() *UpdateReviewedPaymentRequestStatusInternalServerError {
	return &UpdateReviewedPaymentRequestStatusInternalServerError{}
}

/*UpdateReviewedPaymentRequestStatusInternalServerError handles this case with default header values.

A server error occurred.
*/
type UpdateReviewedPaymentRequestStatusInternalServerError struct {
	Payload *supportmessages.Error
}

func (o *UpdateReviewedPaymentRequestStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /payment-requests/{paymentRequestID}/status/reviewed][%d] updateReviewedPaymentRequestStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateReviewedPaymentRequestStatusInternalServerError) GetPayload() *supportmessages.Error {
	return o.Payload
}

func (o *UpdateReviewedPaymentRequestStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(supportmessages.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
