#! /usr/bin/env bash

set -eu -o pipefail

#
# Title: Anti Virus Scanning of Source Code
#
# More information about the docker setup is found here: https://github.com/mko-x/docker-clamav
#

function msg_now() {
  msg=$1
  echo -e "\n$msg: $(date +"%Y-%m-%dT%H:%M:%S %Z")"
}

msg_now "Script Start Time"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../" && pwd )"
readonly DIR
SLEEP=15
readonly SLEEP
DOCKER_IMAGE=mk0x/docker-clamav:alpine
readonly DOCKER_IMAGE
CONTAINER_NAME=anti_virus
readonly CONTAINER_NAME
MOUNT_DIR=/transcom/mymove
readonly MOUNT_DIR
IGNORE_FILES=(pkg/testdatagen/testdata/orders.pdf)
readonly IGNORE_FILES
# WARNING: IGNORE AT OUR PERIL. IF ADDING HERE ADD NOTES!
# - PUA.Pdf.Trojan.EmbeddedJavaScript-1 is ignored because we don't ship PDFs in any docker containers
# - orders.pdf.UNOFFICIAL is a finding based on the ignored file above of the same name
IGNORE_SIGS=(PUA.Pdf.Trojan.EmbeddedJavaScript-1 orders.pdf.UNOFFICIAL)
readonly IGNORE_SIGS
# *.fp is preferred over *.hsb
WHITELIST_FILES=whitelist-files.fp
readonly WHITELIST_FILES
# *.ign2 replaces *.ign files
WHITELIST_SIGS=whitelist-signatures.ign2
readonly WHITELIST_SIGS

if [ -n "${CIRCLECI+x}" ]; then
  echo "RUNNING IN CIRCLECI"
fi

# Remove any existing containers
echo
echo "Cleaning up existing containers and files:"
docker rm -f "${CONTAINER_NAME}" || true
rm -f "${WHITELIST_FILES}"
rm -f "${WHITELIST_SIGS}"

# Start the clamd service and update with freshclam (takes several minutes to be running)
echo
echo "Starting clamd service:"
docker pull "${DOCKER_IMAGE}"

# In the Retry here we are trying to do a couple things:
# - Let 'freshclam' download all the new virus definitions. If this flakes because of an outage
#   with ClamAV then the whole docker container can exit prematurely
# - Wait for the socket to exist so we can connect to it
#
# Waiting does take longer but doing work during the startup process (especially while freshclam
# is updating) means we may be run into a container exiting early and its unclear why.

# Start rerun loop here
for RETRY_COUNT in {1..5}; do
  msg_now "Retry Start Time"

  # Mount the project directory inside for scanning later
  echo
  echo "Mounting the project directory for scanning:"
  docker run -d -p 3310:3310 -v "${DIR}:${MOUNT_DIR}" --name "${CONTAINER_NAME}" "${DOCKER_IMAGE}"

  # Need to sleep just long enough for docker to start up
  sleep 5
  if [ "$(docker inspect -f '{{.State.Running}}' "${CONTAINER_NAME}")" == "false" ]; then
    docker logs "${CONTAINER_NAME}"
    docker rm -f "${CONTAINER_NAME}"
    echo "Container not running! Retry number ${RETRY_COUNT}"
    if [ "${RETRY_COUNT}" == "5" ]; then
      echo "Script cannot continue now that retries are exhuasted"
      exit 1
    else
      break
    fi
  else
    # Remove warning from clamav:
    # WARNING: Ignoring deprecated option DetectBrokenExecutables at /etc/clamav/clamd.conf:30
    docker exec -it "${CONTAINER_NAME}" sed -i 's/.*DetectBrokenExecutables.*//' /etc/clamav/clamd.conf

    # Wait for the clamd service to be available by checking on the existence of the socket
    while true; do
      if docker exec -it "${CONTAINER_NAME}" ls /tmp/clamd.sock &> /dev/null ; then
        break
      else
        echo "Retry ${RETRY_COUNT}: Waiting ${SLEEP} seconds for clamd service to be available"
        sleep "${SLEEP}"
      fi
    done
    break
  fi
done

msg_now "Retry Complete Time"

#
# At this point the container needs to be running and be stable.
#

if [[ -n "${CIRCLECI+x}" ]]; then
  # Can't mount folders in CircleCI so copy this data in
  # https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
  docker cp "${DIR}" "${CONTAINER_NAME}:${MOUNT_DIR}/.."
fi

# Create a whitelist of files to ignore
# The whitelisting is done using `sigtool` to create an md5 hash and placing it in a file
# See https://www.clamav.net/documents/whitelist-databases
# See https://owlbearconsulting.com/doku.php?id=linux_wiki:clamav#whitelist_a_file
# See https://www.clamav.net/documents/file-hash-signatures
echo
echo "Creating whitelist of files to ignore:"
touch "${WHITELIST_FILES}"
for file in "${IGNORE_FILES[@]}"; do
  # This step verifies the ignore file exists and also details some info for debugging
  docker exec -it "${CONTAINER_NAME}" ls -alh "${MOUNT_DIR}/${file}"
  # Sigtool format is "MD5sum:Filesize:Comment"
  docker exec -it "${CONTAINER_NAME}" sigtool --md5 "${MOUNT_DIR}/${file}" | tee -a "${WHITELIST_FILES}"
done
echo
echo "Creating whitelist of signatures to ignore:"
touch "${WHITELIST_SIGS}"
for sig in "${IGNORE_SIGS[@]}"; do
  echo "${sig}" | tee -a "${WHITELIST_SIGS}"
done

# Copy the ignore list into the container in the same directory as the virus database
echo
echo "Copying the ignore list into the container:"
docker cp "${WHITELIST_FILES}" "${CONTAINER_NAME}:/store/"
docker cp "${WHITELIST_SIGS}" "${CONTAINER_NAME}:/store/"
docker exec -it "${CONTAINER_NAME}" chown root:root "/store/${WHITELIST_FILES}" "/store/${WHITELIST_SIGS}"

echo
echo "********************************************************************************"
echo "WARNING: Ignoring these specific files in sigtool format:"
cat "${WHITELIST_FILES}"
echo "********************************************************************************"
echo
echo "********************************************************************************"
echo "WARNING: Ignoring these specific virus signatures:"
cat "${WHITELIST_SIGS}"
echo "********************************************************************************"

echo
echo "Look at all ClamAV files:"
docker exec -it "${CONTAINER_NAME}" ls -alh "/store/"

echo
echo "Reload the virus database with ignore files"
docker exec -it "${CONTAINER_NAME}" clamdscan --reload

# Print the logs so we can see the state of clamd prior to scanning
echo
echo "********************************************************************************"
docker logs "${CONTAINER_NAME}"

# List the version we're working with for auditing reasons
echo
echo "Version Information:"
docker exec -it "${CONTAINER_NAME}" clamd --version
echo "********************************************************************************"
echo

# Run the scan against the mounted folder as well as the folder containing virus defs and whitelists
msg_now "Scan Start Time"
docker exec -it "${CONTAINER_NAME}" clamdscan -v /store "${MOUNT_DIR}"
msg_now "Scan End Time"

# Clean up, useful in developement only
# docker rm -f "${CONTAINER_NAME}"
# rm -f "${WHITELIST_FILES}"
# rm -f "${WHITELIST_SIGS}"

msg_now "Script End Time"
