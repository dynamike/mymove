#! /usr/bin/env bash
#
#   Generates the required task definitions for the ecs-deploy pipieline
#   This does not handle the deployment itself, just prepares
#
set -xeo pipefail

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly DIR

usage() {
    echo "$0 <name> <environment> <app_image> <migration_image> <task_image>"
    exit 1
}
[[ -z $1 || -z $2 || -z $3 ]] && usage

# Display command being run
echo "$0 $*"

set -u

readonly name=$1
readonly environment=$2
readonly app_image=$3
readonly migration_image=$4
readonly task_image=$5

readonly RESERVATION_CPU=512
readonly RESERVATION_MEM=2048

check_arn() {
    local arn=$1
    [[ $arn = arn:* ]] || { echo "Error: Bad ARN: $arn"; exit 1; }
}

#######
# App #
#######
# create new task definition with the given image
echo "* Registering new app task definition"
set +e
app_taskdef_arn=$("${DIR}/../bin/ecs-deploy" task-def \
  --aws-account-id "${AWS_ACCOUNT_ID}" \
  --aws-region us-west-2 \
  --service "${name}" \
  --environment "${environment}" \
  --image "${app_image}" \
  --variables-file "${DIR}/../config/env/${environment}.${name}.env" \
  --entrypoint "/bin/milmove serve" \
  --cpu "${RESERVATION_CPU}" \
  --memory "${RESERVATION_MEM}" \
  --register)
# shellcheck disable=SC2181
if [ "$?" != "0" ]; then echo "$app_taskdef_arn"; exit 1; fi
set -e

readonly app_taskdef_arn
check_arn "$app_taskdef_arn"


# ##############
# # Migrations #
# ##############
# # create new migration task definition with the given image
# echo "* Registering new task definition"
# set +e
# migration_taskdef_arn=$("${DIR}/../bin/ecs-deploy" task-def \
#                                                  --aws-account-id "${AWS_ACCOUNT_ID}" \
#                                                  --aws-region us-west-2 \
#                                                  --service "${name}" \
#                                                  --environment "${environment}" \
#                                                  --image "${migration_image}" \
#                                                  --variables-file "${DIR}/../config/env/${environment}.migrations.env" \
#                                                  --entrypoint "/bin/milmove migrate" \
#                                                  --cpu "${RESERVATION_CPU}" \
#                                                  --memory "${RESERVATION_MEM}" \
#                                                  --register)

# # shellcheck disable=SC2181
# if [ "$?" != "0" ]; then echo "$migration_taskdef_arn"; exit 1; fi
# set -e

# readonly migration_taskdef_arn
# check_arn "$migration_taskdef_arn"


#########
# Tasks #
#########

# Note: currently on hold atm
echo "$task_image"

# tasks_taskdef_arn=$("${DIR}/../bin/ecs-deploy" task-def \
#                                                --aws-account-id "${AWS_ACCOUNT_ID}" \
#                                                --aws-region "${AWS_DEFAULT_REGION}" \
#                                                --service app-tasks \
#                                                --environment "${environment}" \
#                                                --image "${task_image}" \
#                                                --cpu "${RESERVATION_CPU}" \
#                                                --memory "${RESERVATION_MEM}" \
#                                                --variables-file "${variables_file}" \
#                                                --entrypoint "/bin/milmove-tasks ${name}" \
#                                                --register)
# # shellcheck disable=SC2181
# if [ "$?" != "0" ]; then echo "$tasks_taskdef_arn"; exit 1; fi
# set -e

# echo "Put new CloudWatch Event target for ${name}"

# "${DIR}/../bin/ecs-deploy" put-target \
#                            --aws-account-id "${AWS_ACCOUNT_ID}" \
#                            --aws-region "${AWS_DEFAULT_REGION}" \
#                            --environment "${environment}" \
#                            --name "${name}" \
#                            --task-def-arn "${task_def_arn}" \
#                            --put-target

# echo
# echo "Successfully put new CloudWatch Event target for ${name} with ECS task definition ${task_def_arn}"
